<?php

/*
 * This file is part of the Composer Puli Plugin.
 *
 * (c) Bernhard Schussek <bschussek@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Puli\Extension\Composer\RepositoryDumper;

use Composer\Installer\InstallationManager;
use Composer\Package\PackageInterface;
use Composer\Util\Filesystem;
use Puli\Extension\Composer\RepositoryLoader\RepositoryLoader;
use Puli\Filesystem\PhpCacheRepository;
use Puli\Repository\ManageableRepositoryInterface;

/**
 * Dumps a resource repository based on the Composer configuration.
 *
 * @since  1.0
 * @author Bernhard Schussek <bschussek@gmail.com>
 */
class RepositoryDumper
{
    /**
     * @var InstallationManager
     */
    private $installationManager;

    /**
     * @var string
     */
    private $vendorDir;

    /**
     * @var string
     */
    private $projectDir;

    /**
     * @var PackageInterface
     */
    private $projectPackage;

    /**
     * @var PackageInterface[]
     */
    private $installedPackages;

    /**
     * @var ManageableRepositoryInterface
     */
    private $repo;

    /**
     * @var RepositoryLoader
     */
    private $repoLoader;

    public function setInstallationManager(InstallationManager $installationManager)
    {
        $this->installationManager = $installationManager;
    }

    public function setVendorDir($vendorDir)
    {
        $this->vendorDir = $vendorDir;
    }

    public function setProjectDir($projectDir)
    {
        $this->projectDir = $projectDir;
    }

    public function setProjectPackage(PackageInterface $package)
    {
        $this->projectPackage = $package;
    }

    public function setInstalledPackages(array $packages)
    {
        $this->installedPackages = $packages;
    }

    public function setRepository(ManageableRepositoryInterface $repo)
    {
        $this->repo = $repo;
    }

    public function setRepositoryLoader(RepositoryLoader $repoLoader)
    {
        $this->repoLoader = $repoLoader;
    }

    public function dumpRepository()
    {
        $filesystem = new Filesystem();
        $filesystem->ensureDirectoryExists($this->vendorDir);
        $basePath = $filesystem->normalizePath(realpath($this->projectDir));
        $vendorPath = $filesystem->normalizePath(realpath($this->vendorDir));

        $this->repoLoader->setRepository($this->repo);
        $this->repoLoader->loadPackage($this->projectPackage, $basePath);

        foreach ($this->installedPackages as $package) {
            /** @var \Composer\Package\PackageInterface $package */
            $this->repoLoader->loadPackage($package, $this->installationManager->getInstallPath($package));
        }

        $this->repoLoader->validateOverrides();
        $this->repoLoader->applyOverrides();
        $this->repoLoader->applyTags();

        $filesystem->ensureDirectoryExists($vendorPath.'/composer');

        PhpCacheRepository::dumpRepository($this->repo, $vendorPath.'/composer');

        $locatorCode = <<<LOCATOR
<?php

// resource-repository.php @generated by the Composer Puli plugin

use Puli\Filesystem\PhpCacheRepository;

return new PhpCacheRepository(__DIR__.'/composer');

LOCATOR;

        file_put_contents($vendorPath.'/resource-repository.php', $locatorCode);
    }
}
